summary(dowomod)
r.squaredGLMM(dowomod)
?lmer
### NUll model testing of MRQAP results
## This time with single-species networks
library(asnipe)
library(igraph)
#import files
gmmDOWO=readRDS("conspecificDOWOflocks.rds") #import gmm results file. Will need this for permuting group-by-individual matrices.
gmmWBNU=readRDS("conspecificWBNUflocks.rds") #import gmm results file. Will need this for permuting group-by-individual matrices.
gbi_dowo=gmmDOWO$gbi
gbi_wbnu=gmmWBNU$gbi
dowoadj=get_network(gbi_dowo)
wbnuadj=get_network(gbi_wbnu)
diag(dowoadj)=NA #make diagonal of adjacency matrices NA so we don't count these when normalizing values later.
diag(wbnuadj)=NA #make diagonal of adjacency matrices NA so we don't count these when normalizing values later.
simmat=as.matrix(read.csv("simmat.csv", row.names = 1, check.names = F)) #import correlation matrix of daily activity (Z-scores)
logmat=as.matrix(read.csv("logmat.csv", row.names = 1, check.names = F)) #import correlation matrix of proportional feeder use
dowosim=simmat[match(rownames(dowoadj), rownames(simmat)), match(rownames(dowoadj), rownames(simmat))] #sort the activity correlation matrix so rows/columns match adjacency matrix
dowospat=logmat[match(rownames(dowoadj), rownames(logmat)), match(rownames(dowoadj), rownames(logmat))] #sort spatial correlation matrix so rows/columns match adjacency matrix.
#same for WBNU
wbnusim=simmat[match(rownames(wbnuadj), rownames(simmat)), match(rownames(wbnuadj), rownames(simmat))]
wbnuspat=logmat[match(rownames(wbnuadj), rownames(logmat)), match(rownames(wbnuadj), rownames(logmat))]
#MRQAP-without normalizing values.
mrqap.dsp(dowosim~dowoadj+dowospat) #using activity similarity as the response variable and network + logger similarity as a covariates. This is raw numbers, not normalized.
mrqap.dsp(wbnusim~wbnuadj+wbnuspat)
?mrqap.dsp
dowo.mrqap.norm=mrqap.dsp(dowosim.norm~dowoadj.norm+dowospat.norm) #same test, but now with normalized values. The results are the same but the coefficient is different.
normalize_matrix=function(m){
(m-min(m, na.rm=T))/(max(m, na.rm=T)-min(m, na.rm=T))
}
dowosim.norm=normalize_matrix(dowosim)
dowoadj.norm=normalize_matrix(dowoadj)
dowospat.norm=normalize_matrix(dowospat)
dowo.mrqap.norm=mrqap.dsp(dowosim.norm~dowoadj.norm+dowospat.norm) #same test, but now with normalized values. The results are the same but the coefficient is different.
dowo.mrqap.norm
str(dowo.mrqap.norm)
dowo.mrqap.norm$fitted.values
dowoadj.norm
18*18
18*17/(17)
18*17/2
mean(dowo.mrqap.norm$fitted.values)
dowo.mrqap.norm
str(dowo.mrqap.norm)
library(statnet)
library(help='statnet')
library(help='sna')
?netlm
library(sna)
netlm(dowosim.norm~dowoadj.norm+dowospat.norm, mode="graph")
dowoadj
?network
y=network(dowosim.norm)
y
y=network(dowosim.norm, directed=F)
x1=network(dowoadj.norm, directed=F)
x2=network(dowospat.norm, directed=F)
netlm(y~x1+x2, mode="graph")
as.matrix.network.adjacency(y)
?as.matrix.network.adjacency
?netlm
#Create some input graphs
x<-rgraph(20,4)
#Create a response structure
y<-x[1,,]+4*x[2,,]+2*x[3,,]   #Note that the fourth graph is unrelated
#Fit a netlm model
nl<-netlm(y,x,reps=100)
#Examine the results
summary(nl)
dowo.mrqap.norm
#store the results of MRQAP with empirical network
wbnusim.norm=normalize_matrix(wbnusim)
wbnuadj.norm=normalize_matrix(wbnuadj)
wbnuspat.norm=normalize_matrix(wbnuspat)
emp.mod.wbnu=mrqap.dsp(wbnusim.norm~wbnuadj.norm+wbnuspat.norm)
emp.mod.wbnu
?mrqap.dsp
str(emp.mod.wbnu)
load("conspecificDOWOflocks.rds")
readRDS("conspecificDOWOflocks.rds")
dowo_gmm=readRDS("conspecificDOWOflocks.rds")
dowo_gmm
str(dowo_gmm)
dowo_gbi=dowo_gmm$gbi
library(asnipe)
wbnu_gmm=readRDS("conspecificWBNUflocks.rds")
wbnu_gbi=wbnu_gmm$gbi
dowo_net=get_network(dowo_gbi)
igraph()
library(igraph)
?graph_from_adjacency_matrix
dowo_net=graph_from_adjacency_matrix(get_network(dowo_gbi), mode="undirected", weighted=T)
dowo_net
wbnu_net=graph_from_adjacency_matrix(get_network(wbnu_gbi), mode="undirected", weighted=T)
indivs=read.csv("RFID_indivs.csv")
head(indivs)
indivs=read.csv("RFID_Records_fixed.csv")
head(indivs)
V(dowo_net)$name
match(V(dowo_net)$name, indivs$RFID)
indivs[match(V(dowo_net)$name, indivs$RFID),"Sex")
indivs[match(V(dowo_net)$name, indivs$RFID),"Sex"]
V(dowo_net)$sex=indivs[match(V(dowo_net)$name, indivs$RFID),"Sex"]
V(wbnu_net)$sex=indivs[match(V(wbnu_net)$name, indivs$RFID),"Sex"]
V(wbnu_net)$sex
plot(dowo_net, vertex.color=V(dowo_net)$sex)
plot(dowo_net, vertex.color=as.factor(V(dowo_net)$sex))
as.factor(V(dowo_net)$sex)
plot(dowo_net, vertex.color=as.numeric(V(dowo_net)$sex))
plot(dowo_net, vertex.color=as.factor(V(dowo_net)$sex))
plot(dowo_net, vertex.color=as.factor(V(dowo_net)$sex), vertex.label="", edge.width=E(dowo_net)$weight*10)
plot(dowo_net, vertex.color=as.factor(V(dowo_net)$sex), vertex.label="", edge.width=E(dowo_net)$weight*20)
plot(dowo_net, vertex.color=as.factor(V(dowo_net)$sex), vertex.label="", edge.width=E(dowo_net)$weight*30)
plot(wbnu_net, vertex.color=as.factor(V(wbnu_net)$sex), vertex.label="", edge.width=E(wbnu_net)$weight*30)
plot(dowo_net, vertex.color=as.factor(V(dowo_net)$sex), vertex.label="", edge.width=E(dowo_net)$weight*20)
plot(wbnu_net, vertex.color=as.factor(V(wbnu_net)$sex), vertex.label="", edge.width=E(wbnu_net)$weight*20)
V(dowo_net)$sex=indivs[match(V(dowo_net)$name, indivs$RFID),"Sex"]=="F"
V(dowo_net)$sex
V(dowo_net)$sex=indivs[match(V(dowo_net)$name, indivs$RFID),"Sex"]=="M"+0
V(dowo_net)$sex=(indivs[match(V(dowo_net)$name, indivs$RFID),"Sex"]=="M")+0
V(dowo_net)$sex
V(dowo_net)$sex=indivs[match(V(dowo_net)$name, indivs$RFID),"Sex"]
V(wbnu_net)$sex=indivs[match(V(wbnu_net)$name, indivs$RFID),"Sex"]
sex_color=data.frame(sex=c("F", "M", "U"), color=c("yellow", "purple", "white"))
plot(dowo_net, vertex.color=sex_color[match(V(dowo_net)$sex, sex_color$sex), "color"], vertex.label="", edge.width=E(dowo_net)$weight*20)
plot(wbnu_net, vertex.color=sex_color[match(V(wbnu_net)$sex, sex_color$sex), "color"], vertex.label="", edge.width=E(wbnu_net)$weight*20)
library(assortnet)
assortment.discrete(as_adj(dowo_net, sparse=F), V(dowo_net)$sex)
?assortment.discrete
sexassort_dowo=assortment.discrete(as_adj(dowo_net, sparse=F), V(dowo_net)$sex, SE=T)
sexassort_dowo
sexassort_wbnu=assortment.discrete(as_adj(wbnu_net, sparse=F), V(wbnu_net)$sex, SE=T)
sexassort_wbnu
head(indivs)
V(dowo_net)$age=indivs[match(V(dowo_net)$name, indivs$RFID),"Age"]
V(dowo_net)$age
#do node permutations
random_sex=lapply(1:1000, function(x) sample(V(dowo_net)$sex, length(V(dowo_net)$sex), replace=F))
random_sex[[1]]
sapply(random_sex, function(x) assortment.discrete(as_adj(dowo_net, sparse=F), x, SE=T))
sapply(random_sex, function(x) assortment.discrete(as_adj(dowo_net, sparse=F), x, SE=F)$r)
assort_rand=sapply(random_sex, function(x) assortment.discrete(as_adj(dowo_net, sparse=F), x, SE=F)$r)
?quantile
ci_assort_rand=quantile(assort_rand, probs = c(0.025, 0.925))
ci_assort_rand
sexassort_dowo
sexassort_dowo$r
p_assort_rand=length(which(assort_rand<sexassort_dowo$r))/1001
p_assort_rand
hist(assort_rand_dowo)
assort_rand_dowo=sapply(random_sex, function(x) assortment.discrete(as_adj(dowo_net, sparse=F), x, SE=F)$r)
hist(assort_rand_dowo)
sexassort_wbnu=assortment.discrete(as_adj(wbnu_net, sparse=F), V(wbnu_net)$sex, SE=T)
sexassort_wbnu
#do node permutations
random_sex_wbnu=lapply(1:1000, function(x) sample(V(wbnu_net)$sex, length(V(wbnu_net)$sex), replace=F))
assort_rand_wbnu=sapply(random_sex, function(x) assortment.discrete(as_adj(wbnu_net, sparse=F), x, SE=F)$r)
p_assort_wbnu=length(which(assort_rand_wbnu<sexassort_wbnu$r))/1001
ci_assort_rand_wbnu=quantile(assort_rand_wbnu, probs = c(0.025, 0.925))
p_assort_rand
assort_rand_dowo=sapply(random_sex_dowo, function(x) assortment.discrete(as_adj(dowo_net, sparse=F), x, SE=F)$r)
random_sex_dowo=lapply(1:1000, function(x) sample(V(dowo_net)$sex, length(V(dowo_net)$sex), replace=F))
assort_rand_dowo=sapply(random_sex_dowo, function(x) assortment.discrete(as_adj(dowo_net, sparse=F), x, SE=F)$r)
p_assort_dowo=length(which(assort_rand_dowo<sexassort_dowo$r))/1001
ci_assort_rand_dowo=quantile(assort_rand_dowo, probs = c(0.025, 0.925))
p_assort_rand
sexassort_wbnu=assortment.discrete(as_adj(wbnu_net, sparse=F), V(wbnu_net)$sex, SE=T)
sexassort_wbnu
#do node permutations
random_sex_wbnu=lapply(1:1000, function(x) sample(V(wbnu_net)$sex, length(V(wbnu_net)$sex), replace=F))
assort_rand_wbnu=sapply(random_sex_wbnu, function(x) assortment.discrete(as_adj(wbnu_net, sparse=F), x, SE=F)$r)
p_assort_wbnu=length(which(assort_rand_wbnu<sexassort_wbnu$r))/1001
ci_assort_rand_wbnu=quantile(assort_rand_wbnu, probs = c(0.025, 0.925))
p_assort_rand
plot(dowo_net, vertex.color=sex_color[match(V(dowo_net)$sex, sex_color$sex), "color"], vertex.label="", edge.width=E(dowo_net)$weight*20)
plot(wbnu_net, vertex.color=sex_color[match(V(wbnu_net)$sex, sex_color$sex), "color"], vertex.label="", edge.width=E(wbnu_net)$weight*20)
sexassort_dowo=assortment.discrete(as_adj(dowo_net, sparse=F), V(dowo_net)$sex, SE=T)
sexassort_dowo$r
#do node permutations
random_sex_dowo=lapply(1:1000, function(x) sample(V(dowo_net)$sex, length(V(dowo_net)$sex), replace=F))
assort_rand_dowo=sapply(random_sex_dowo, function(x) assortment.discrete(as_adj(dowo_net, sparse=F), x, SE=F)$r)
p_assort_dowo=length(which(assort_rand_dowo<sexassort_dowo$r))/1001
ci_assort_rand_dowo=quantile(assort_rand_dowo, probs = c(0.025, 0.925))
p_assort_rand
sexassort_wbnu=assortment.discrete(as_adj(wbnu_net, sparse=F), V(wbnu_net)$sex, SE=T)
sexassort_wbnu
#do node permutations
random_sex_wbnu=lapply(1:1000, function(x) sample(V(wbnu_net)$sex, length(V(wbnu_net)$sex), replace=F))
assort_rand_wbnu=sapply(random_sex_wbnu, function(x) assortment.discrete(as_adj(wbnu_net, sparse=F), x, SE=F)$r)
p_assort_wbnu=length(which(assort_rand_wbnu<sexassort_wbnu$r))/1001
ci_assort_rand_wbnu=quantile(assort_rand_wbnu, probs = c(0.025, 0.925))
p_assort_rand
sexassort_wbnu$r
assort_rand_wbnu
which(assort_rand_wbnu<sexassort_wbnu$r)
mean(assort_rand_dowo)
mean(assort_rand_wbnu)
p_assort_rand_wbnu
p_assort_wbnu
ci_assort_rand_wbnu
mean(assort_rand_wbnu)
### WBNU with parallel processing!
library(foreach)
times=1000
n.cores=detectCores()
system.time({
registerDoParallel(n.cores)
wbnu.results.parallel=foreach(i = 1:times) %dopar% as.matrix(network_swap(wbnugbi.filt, data_format="GBI", swaps=10000, association_matrix = wbnuadj, locations=wbnu.locations, days=wbnu.days, within_day=TRUE, within_location=FALSE)$Association_index)
})
stopImplicitCluster()
wbnuperm.adjs=wbnu.results.parallel
##
load("dowo_results_20190814.rdat")
load("wbnu_results_20190814.rdat")
length(dowoperm.adjs)
dowoperm.adjs[[1]]
rownames(dowoperm.adjs[[1]])
rownames(dowoperm.adjs[[2]])
V(dowo_net)$name
sapply(dowoperm.adjs, function(x) assortment.discrete(as_adj(x, sparse=F), V(dowo_net)$sex)$r)
sapply(1:1000, function(x) assortment.discrete(as_adj(dowoperm.adjs[[x]], sparse=F), V(dowo_net)$sex)$r)
sapply(dowoperm.adjs, function(x) assortment.discrete(x, V(dowo_net)$sex)$r)
random_sex2_dowo=sapply(dowoperm.adjs, function(x) assortment.discrete(x, V(dowo_net)$sex)$r)
assort_rand_dowo2=sapply(dowoperm.adjs, function(x) assortment.discrete(x, V(dowo_net)$sex)$r)
p_assort_dowo=length(which(assort_rand_dowo2<sexassort_dowo$r))/1001
p_assort_dowo
assort_rand_wbnu2=sapply(wbnuperm.adjs, function(x) assortment.discrete(x, V(wbnu_net)$sex)$r)
p_assort_wbnu2=length(which(assort_rand_wbnu2<sexassort_wbnu$r))/1001
p_assort_wbnu2
wbnuperm.adjs
?assortment.discrete
assort_rand_wbnu2
mean(assort_rand_wbnu2)
random_sex_wbnu=lapply(1:1000, function(x) sample(V(wbnu_net)$sex, length(V(wbnu_net)$sex), replace=F))
assort_rand_wbnu=sapply(random_sex_wbnu, function(x) assortment.discrete(as_adj(wbnu_net, sparse=F), x, SE=F)$r)
p_assort_wbnu=length(which(assort_rand_wbnu<sexassort_wbnu$r))/1001
ci_assort_rand_wbnu=quantile(assort_rand_wbnu, probs = c(0.025, 0.925))
mean(assort_rand_wbnu)
p_assort_wbnu
random_sex_wbnu=lapply(1:1000, function(x) sample(V(wbnu_net)$sex, length(V(wbnu_net)$sex), replace=F))
assort_rand_wbnu=sapply(random_sex_wbnu, function(x) assortment.discrete(as_adj(wbnu_net, sparse=F), x, SE=F)$r)
p_assort_wbnu=length(which(assort_rand_wbnu<sexassort_wbnu$r))/1001
ci_assort_rand_wbnu=quantile(assort_rand_wbnu, probs = c(0.025, 0.925))
mean(assort_rand_wbnu)
p_assort_wbnu
sexassort_dowo=assortment.discrete(as_adj(dowo_net, sparse=F), V(dowo_net)$sex, SE=T)
sexassort_dowo$r
#do node permutations
random_sex_dowo=lapply(1:1000, function(x) sample(V(dowo_net)$sex, length(V(dowo_net)$sex), replace=F))
assort_rand_dowo=sapply(random_sex_dowo, function(x) assortment.discrete(as_adj(dowo_net, sparse=F), x, SE=F)$r)
p_assort_dowo=length(which(assort_rand_dowo<sexassort_dowo$r))/1001
ci_assort_rand_dowo=quantile(assort_rand_dowo, probs = c(0.025, 0.925))
p_assort_rand
V(wbnu_net)
plot(wbnu_net, vertex.color=sex_color[match(V(wbnu_net)$sex, sex_color$sex), "color"], vertex.label=V(wbnu_net)$name, edge.width=E(wbnu_net)$weight*20)
plot(dowo_net, vertex.color=sex_color[match(V(dowo_net)$sex, sex_color$sex), "color"], vertex.label="", edge.width=E(dowo_net)$weight*20)
plot(dowo_net, vertex.color=sex_color[match(V(dowo_net)$sex, sex_color$sex), "color"], vertex.label="", edge.width=E(dowo_net)$weight*20)
?as_adj
sexassort_dowo=assortment.discrete(as_adj(dowo_net, sparse=F, attr=weight), V(dowo_net)$sex, SE=T)
sexassort_dowo=assortment.discrete(as_adj(dowo_net, sparse=F, attr="weight"), V(dowo_net)$sex, SE=T)
sexassort_dowo$r
sexassort_dowo=assortment.discrete(as_adj(dowo_net, sparse=F, attr="weight"), V(dowo_net)$sex, SE=T)
sexassort_dowo$r
#do node permutations
random_sex_dowo=lapply(1:1000, function(x) sample(V(dowo_net)$sex, length(V(dowo_net)$sex), replace=F))
assort_rand_dowo=sapply(random_sex_dowo, function(x) assortment.discrete(as_adj(dowo_net, sparse=F, attr="weight"), x, SE=F)$r)
p_assort_dowo=length(which(assort_rand_dowo<sexassort_dowo$r))/1001
ci_assort_rand_dowo=quantile(assort_rand_dowo, probs = c(0.025, 0.925))
p_assort_rand
assort_rand_dowo
assort_rand_dowo
hist(assort_rand_dowo)
sexassort_dowo=assortment.discrete(as_adj(dowo_net, sparse=F, attr="weight"), V(dowo_net)$sex, SE=T)
sexassort_dowo$r
#do node permutations
random_sex_dowo=lapply(1:1000, function(x) sample(V(dowo_net)$sex, length(V(dowo_net)$sex), replace=F))
assort_rand_dowo=sapply(random_sex_dowo, function(x) assortment.discrete(as_adj(dowo_net, sparse=F, attr="weight"), x, SE=F)$r)
p_assort_dowo=length(which(assort_rand_dowo<sexassort_dowo$r))/1001
ci_assort_rand_dowo=quantile(assort_rand_dowo, probs = c(0.025, 0.925))
p_assort_rand
sexassort_dowo$r
ci_assort_rand_dowo
p_assort_dowo
sexassort_wbnu=assortment.discrete(as_adj(wbnu_net, attr="weight", sparse=F), V(wbnu_net)$sex, SE=T)
sexassort_wbnu
#do node permutations
random_sex_wbnu=lapply(1:1000, function(x) sample(V(wbnu_net)$sex, length(V(wbnu_net)$sex), replace=F))
assort_rand_wbnu=sapply(random_sex_wbnu, function(x) assortment.discrete(as_adj(wbnu_net, attr="weight", sparse=F), x, SE=F)$r)
p_assort_wbnu=length(which(assort_rand_wbnu<sexassort_wbnu$r))/1001
ci_assort_rand_wbnu=quantile(assort_rand_wbnu, probs = c(0.025, 0.925))
mean(assort_rand_wbnu)
p_assort_wbnu
sexassort_wbnu
sexassort_wbnu$r
assort_rand_wbnu
hist(assort_rand_wbnu)
p_assort_wbnu
wbnu_net_noU=delete_vertices(wbnu_net, which(V(wbnu_net)$sex=="U"))
wbnu_net_noU
sexassort_wbnu=assortment.discrete(as_adj(wbnu_net_noU, attr="weight", sparse=F), V(wbnu_net)$sex, SE=T)
sexassort_wbnu=assortment.discrete(as_adj(wbnu_net_noU, attr="weight", sparse=F), V(wbnu_net_noU)$sex, SE=T)
sexassort_wbnu$r
#do node permutations
random_sex_wbnu=lapply(1:1000, function(x) sample(V(wbnu_net_noU)$sex, length(V(wbnu_net_noU)$sex), replace=F))
assort_rand_wbnu=sapply(random_sex_wbnu, function(x) assortment.discrete(as_adj(wbnu_net_noU, attr="weight", sparse=F), x, SE=F)$r)
p_assort_wbnu=length(which(assort_rand_wbnu<sexassort_wbnu$r))/1001
ci_assort_rand_wbnu=quantile(assort_rand_wbnu, probs = c(0.025, 0.925))
mean(assort_rand_wbnu)
p_assort_wbnu
hist(assort_rand_wbnu)
sexassort_wbnu=assortment.discrete(as_adj(wbnu_net, attr="weight", sparse=F), V(wbnu_net)$sex, SE=T)
sexassort_wbnu$r
#do node permutations
random_sex_wbnu=lapply(1:1000, function(x) sample(V(wbnu_net)$sex, length(V(wbnu_net)$sex), replace=F))
assort_rand_wbnu=sapply(random_sex_wbnu, function(x) assortment.discrete(as_adj(wbnu_net, attr="weight", sparse=F), x, SE=F)$r)
p_assort_wbnu=length(which(assort_rand_wbnu<sexassort_wbnu$r))/1001
ci_assort_rand_wbnu=quantile(assort_rand_wbnu, probs = c(0.025, 0.925))
mean(assort_rand_wbnu)
p_assort_wbnu
hist(assort_rand_wbnu)
V(wbnu_net)$sex[which(V(wbnu_net)$name=="0110174B57")]="M"
sexassort_wbnu=assortment.discrete(as_adj(wbnu_net, attr="weight", sparse=F), V(wbnu_net)$sex, SE=T)
sexassort_wbnu$r
plot(wbnu_net, vertex.color=sex_color[match(V(wbnu_net)$sex, sex_color$sex), "color"], vertex.label=V(wbnu_net)$name, edge.width=E(wbnu_net)$weight*20)
#networks
library(asnipe)
library(igraph)
library(assortnet)
dowo_gmm=readRDS("conspecificDOWOflocks.rds")
str(dowo_gmm)
dowo_gbi=dowo_gmm$gbi
wbnu_gmm=readRDS("conspecificWBNUflocks.rds")
wbnu_gbi=wbnu_gmm$gbi
dowo_net=graph_from_adjacency_matrix(get_network(dowo_gbi), mode="undirected", weighted=T)
wbnu_net=graph_from_adjacency_matrix(get_network(wbnu_gbi), mode="undirected", weighted=T)
indivs=read.csv("RFID_Records_fixed.csv")
head(indivs)
V(dowo_net)$sex=indivs[match(V(dowo_net)$name, indivs$RFID),"Sex"]
V(wbnu_net)$sex=indivs[match(V(wbnu_net)$name, indivs$RFID),"Sex"]
V(dowo_net)$age=indivs[match(V(dowo_net)$name, indivs$RFID),"Age"]
sex_color=data.frame(sex=c("F", "M", "U"), color=c("yellow", "purple", "white"))
plot(dowo_net, vertex.color=sex_color[match(V(dowo_net)$sex, sex_color$sex), "color"], vertex.label="", edge.width=E(dowo_net)$weight*20)
plot(wbnu_net, vertex.color=sex_color[match(V(wbnu_net)$sex, sex_color$sex), "color"], vertex.label=V(wbnu_net)$name, edge.width=E(wbnu_net)$weight*20)
V(wbnu_net)$name
#networks
library(asnipe)
library(igraph)
library(assortnet)
dowo_gmm=readRDS("conspecificDOWOflocks.rds")
str(dowo_gmm)
dowo_gbi=dowo_gmm$gbi
wbnu_gmm=readRDS("conspecificWBNUflocks.rds")
wbnu_gbi=wbnu_gmm$gbi
dowo_net=graph_from_adjacency_matrix(get_network(dowo_gbi), mode="undirected", weighted=T)
wbnu_net=graph_from_adjacency_matrix(get_network(wbnu_gbi), mode="undirected", weighted=T)
indivs=read.csv("RFID_Records_fixed.csv")
head(indivs)
V(dowo_net)$sex=indivs[match(V(dowo_net)$name, indivs$RFID),"Sex"]
V(wbnu_net)$sex=indivs[match(V(wbnu_net)$name, indivs$RFID),"Sex"]
V(dowo_net)$age=indivs[match(V(dowo_net)$name, indivs$RFID),"Age"]
sex_color=data.frame(sex=c("F", "M", "U"), color=c("yellow", "purple", "white"))
plot(dowo_net, vertex.color=sex_color[match(V(dowo_net)$sex, sex_color$sex), "color"], vertex.label="", edge.width=E(dowo_net)$weight*20)
plot(wbnu_net, vertex.color=sex_color[match(V(wbnu_net)$sex, sex_color$sex), "color"], vertex.label=V(wbnu_net)$name, edge.width=E(wbnu_net)$weight*20)
#wbnu_net_noU=delete_vertices(wbnu_net, which(V(wbnu_net)$sex=="U"))
#0110174B57
which(V(wbnu_net)$sex=="U")
#wbnu_net_noU=delete_vertices(wbnu_net, which(V(wbnu_net)$sex=="U"))
#0110174B57
V(wbnu_net)$name[which(V(wbnu_net)$sex=="U")]
#wbnu_net_noU=delete_vertices(wbnu_net, which(V(wbnu_net)$sex=="U"))
#0110174B57
V(wbnu_net)$sex[which(V(wbnu_net)$sex=="U")]="M"
sexassort_wbnu=assortment.discrete(as_adj(wbnu_net, attr="weight", sparse=F), V(wbnu_net)$sex, SE=T)
sexassort_wbnu$r
#do node permutations
random_sex_wbnu=lapply(1:1000, function(x) sample(V(wbnu_net)$sex, length(V(wbnu_net)$sex), replace=F))
assort_rand_wbnu=sapply(random_sex_wbnu, function(x) assortment.discrete(as_adj(wbnu_net, attr="weight", sparse=F), x, SE=F)$r)
p_assort_wbnu=length(which(assort_rand_wbnu<sexassort_wbnu$r))/1001
ci_assort_rand_wbnu=quantile(assort_rand_wbnu, probs = c(0.025, 0.925))
mean(assort_rand_wbnu)
p_assort_wbnu
hist(assort_rand_wbnu)
dowo_gmm=readRDS("conspecificDOWOflocks.rds")
str(dowo_gmm)
dowo_gbi=dowo_gmm$gbi
wbnu_gmm=readRDS("conspecificWBNUflocks.rds")
wbnu_gbi=wbnu_gmm$gbi
dowo_net=graph_from_adjacency_matrix(get_network(dowo_gbi), mode="undirected", weighted=T)
wbnu_net=graph_from_adjacency_matrix(get_network(wbnu_gbi), mode="undirected", weighted=T)
dowo_gmm=readRDS("conspecificDOWOflocks.rds")
str(dowo_gmm)
dowo_gbi=dowo_gmm$gbi
wbnu_gmm=readRDS("conspecificWBNUflocks.rds")
wbnu_gbi=wbnu_gmm$gbi
dowo_net=graph_from_adjacency_matrix(get_network(dowo_gbi), mode="undirected", weighted=T)
wbnu_net=graph_from_adjacency_matrix(get_network(wbnu_gbi), mode="undirected", weighted=T)
indivs=read.csv("RFID_Records_fixed.csv")
head(indivs)
V(dowo_net)$sex=indivs[match(V(dowo_net)$name, indivs$RFID),"Sex"]
V(wbnu_net)$sex=indivs[match(V(wbnu_net)$name, indivs$RFID),"Sex"]
V(dowo_net)$age=indivs[match(V(dowo_net)$name, indivs$RFID),"Age"]
sex_color=data.frame(sex=c("F", "M", "U"), color=c("yellow", "purple", "white"))
plot(dowo_net, vertex.color=sex_color[match(V(dowo_net)$sex, sex_color$sex), "color"], vertex.label="", edge.width=E(dowo_net)$weight*20)
plot(wbnu_net, vertex.color=sex_color[match(V(wbnu_net)$sex, sex_color$sex), "color"], vertex.label=V(wbnu_net)$name, edge.width=E(wbnu_net)$weight*20)
sexassort_wbnu=assortment.discrete(as_adj(wbnu_net, attr="weight", sparse=F), V(wbnu_net)$sex, SE=T)
sexassort_wbnu$r
random_sex_wbnu=lapply(1:1000, function(x) sample(V(wbnu_net)$sex, length(V(wbnu_net)$sex), replace=F))
assort_rand_wbnu=sapply(random_sex_wbnu, function(x) assortment.discrete(as_adj(wbnu_net, attr="weight", sparse=F), x, SE=F)$r)
p_assort_wbnu=length(which(assort_rand_wbnu<sexassort_wbnu$r))/1001
ci_assort_rand_wbnu=quantile(assort_rand_wbnu, probs = c(0.025, 0.925))
mean(assort_rand_wbnu)
p_assort_wbnu
hist(assort_rand_wbnu)
dowoperm.adjs[[1]]
assort_rand_wbnu2=sapply(wbnuperm.adjs, function(x) assortment.discrete(x, V(wbnu_net)$sex)$r)
p_assort_wbnu2=length(which(assort_rand_wbnu2<sexassort_wbnu$r))/1001
p_assort_wbnu2
assort_rand_dowo2=sapply(dowoperm.adjs, function(x) assortment.discrete(x, V(dowo_net)$sex)$r)
p_assort_dowo2=length(which(assort_rand_dowo2<sexassort_dowo$r))/1001
p_assort_dowo2
assort_rand_wbnu2=sapply(wbnuperm.adjs, function(x) assortment.discrete(x, V(wbnu_net)$sex)$r)
p_assort_wbnu2=length(which(assort_rand_wbnu2<sexassort_wbnu$r))/1001
p_assort_wbnu2
assort_rand_dowo2
hist(assort_rand_dowo2)
hist(assort_rand_wbnu2)
sexassort_wbnu$r
sexassort_dowo$r
E(dowo_net)$weight
cv(E(dowo_net)$weight)
sd(E(dowo_net)$weight)/mean(E(dowo_net)$weight)
cv_dowo_emp=sd(E(dowo_net)$weight)/mean(E(dowo_net)$weight)
cv=function(x) sd(x)/mean(x)
cv_dowo_emp=cv(E(dowo_net)$weight)
cv_dowo_emp
cv_dowo_rand=sapply(dowoperm.adj, function(x) sd(upper.tri(x)/mean(upper.tri(x))))
cv_dowo_rand=sapply(dowoperm.adjs, function(x) sd(upper.tri(x)/mean(upper.tri(x))))
cv_dowo_rand
dowoperm.adjs[[1]]
mean(dowoperm.adjs[[1]])
mean(dowoperm.adjs[[2]])
mean(dowoperm.adjs[[3]])
cv_dowo_rand=sapply(dowoperm.adjs, function(y) cv(y))
cv_dowo_rand
hist(cv_dowo_emp)
hist(cv_dowo_rand)
cv_dowo_emp
hist(cv_dowo_rand, xlim=c(0.65, 1.3))
abline(v=cv_dowo_emp, lty=2, col="red", lwd=2)
hist(cv_dowo_rand, xlim=c(0.65, 1.3))
abline(v=cv_dowo_emp, lty=2, col="red", lwd=2)
?abline
?lines
lines(c(cv_dowo_emp, cv_dowo_emp), c(0,200), lty=2, col="red", lwd=2)
hist(cv_dowo_rand, xlim=c(0.65, 1.3))
lines(c(cv_dowo_emp, cv_dowo_emp), c(0,200), lty=2, col="red", lwd=2)
cv_wbnu_emp=cv(E(wbnu_net)$weight)
cv_wbnu_rand=sapply(wbnuperm.adjs, function(y) cv(y))
hist(cv_wbnu_rand, xlim=c(0.65, 1.3))
lines(c(cv_wbnu_emp, cv_wbnu_emp), c(0,200), lty=2, col="red", lwd=2)
cv_wbnu_emp
hist(cv_wbnu_rand, xlim=c(0.8, 2.2))
lines(c(cv_wbnu_emp, cv_wbnu_emp), c(0,200), lty=2, col="red", lwd=2)
cv_dowo_emp
quantile(cv_dowo_rand, probs=c(0.025, 0.975))
cv_wbnu_emp
quantile(cv_wbnu_rand, probs=c(0.025, 0.975))
sexassort_dowo$r
quantile(assort_rand_dowo2, probs=c(0.025, 0.975))
p_assort_dowo2
sexassort_wbnu$r
quantile(cv_wbnu_rand, probs=c(0.025, 0.975))
quantile(assort_rand_wbnu2, probs=c(0.025, 0.975))
assort_rand_dowo2=sapply(dowoperm.adjs, function(x) assortment.discrete(x, V(dowo_net)$sex)$r)
p_assort_dowo2=length(which(assort_rand_dowo2<sexassort_dowo$r))/1001
p_assort_dowo2
quantile(assort_rand_dowo2, probs=c(0.025, 0.975))
sexassort_dowo$r
assort_rand_wbnu2=sapply(wbnuperm.adjs, function(x) assortment.discrete(x, V(wbnu_net)$sex)$r)
p_assort_wbnu2=length(which(assort_rand_wbnu2<sexassort_wbnu$r))/1001
p_assort_wbnu2
quantile(assort_rand_wbnu2, probs=c(0.025, 0.975))
sexassort_wbnu$r
sexassort_dowo$r
#do node permutations
random_sex_dowo=lapply(1:1000, function(x) sample(V(dowo_net)$sex, length(V(dowo_net)$sex), replace=F))
assort_rand_dowo=sapply(random_sex_dowo, function(x) assortment.discrete(as_adj(dowo_net, sparse=F, attr="weight"), x, SE=F)$r)
p_assort_dowo=length(which(assort_rand_dowo<sexassort_dowo$r))/1001
ci_assort_rand_dowo=quantile(assort_rand_dowo, probs = c(0.025, 0.925))
p_assort_dowo
ci_assort_rand_dowo
sexassort_wbnu=assortment.discrete(as_adj(wbnu_net, attr="weight", sparse=F), V(wbnu_net)$sex, SE=T)
sexassort_wbnu$r
#do node permutations
random_sex_wbnu=lapply(1:1000, function(x) sample(V(wbnu_net)$sex, length(V(wbnu_net)$sex), replace=F))
assort_rand_wbnu=sapply(random_sex_wbnu, function(x) assortment.discrete(as_adj(wbnu_net, attr="weight", sparse=F), x, SE=F)$r)
p_assort_wbnu=length(which(assort_rand_wbnu<sexassort_wbnu$r))/1001
ci_assort_rand_wbnu=quantile(assort_rand_wbnu, probs = c(0.025, 0.925))
mean(assort_rand_wbnu)
p_assort_wbnu
ci_assort_rand
sexassort_wbnu$r
p_assort_wbnu
hist(assort_rand_wbnu)
ci_assort_rand_wbnu
plot(dowo_net, vertex.color=sex_color[match(V(dowo_net)$sex, sex_color$sex), "color"], vertex.label="", edge.width=E(dowo_net)$weight*20)
plot(dowo_net, vertex.color=sex_color[match(V(dowo_net)$sex, sex_color$sex), "color"], vertex.label="", edge.width=E(dowo_net)$weight*30)
plot(wbnu_net, vertex.color=sex_color[match(V(wbnu_net)$sex, sex_color$sex), "color"], vertex.label=V(wbnu_net)$name, edge.width=E(wbnu_net)$weight*30)
plot(wbnu_net, vertex.color=sex_color[match(V(wbnu_net)$sex, sex_color$sex), "color"], vertex.label="", edge.width=E(wbnu_net)$weight*30)
plot(dowo_net, vertex.color=sex_color[match(V(dowo_net)$sex, sex_color$sex), "color"], vertex.label="", edge.width=E(dowo_net)$weight*30)
plot(wbnu_net, vertex.color=sex_color[match(V(wbnu_net)$sex, sex_color$sex), "color"], vertex.label="", edge.width=E(wbnu_net)$weight*30)
