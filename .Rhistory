wbnu.b = wbnu.friend.activity %>% gather("ID", "z_score_friends", -Date, -nightlows)
wbnu.final.dat=merge(wbnu.a,wbnu.b)
wbnumod=lmer(z_score~scale(nightlows)*scale(z_score_friends)+(1|ID), data=wbnu.final.dat)
summary(wbnumod)
r.squaredGLMM(wbnumod)
dowomod=lmer(z_score~scale(nightlows)*scale(z_score_friends)+(1|ID), data=dowo.final.dat)
summary(dowomod)
r.squaredGLMM(dowomod)
wbnumod=lmer(z_score~scale(nightlows)*scale(z_score_friends)+(1|ID), data=wbnu.final.dat)
summary(wbnumod)
r.squaredGLMM(wbnumod)
dowomod=lmer(z_score~scale(nightlows)*scale(z_score_friends)+(1|ID), data=dowo.final.dat)
summary(dowomod)
r.squaredGLMM(dowomod)
#### PPNC Network and Temperature Paper
require(tidyverse)
require(lubridate)
##data
load("all_visits.dat")
load("weather.dat")
weather$Date <- as.Date(weather$Date, format = "%m/%d/%Y")
weather <- weather %>%
mutate(Hour = hour(datetime)) %>%
filter(Hour >= 19 | Hour <= 4) %>%
mutate(Lagdate = ifelse(Hour <= 4, paste0(lag(Date)), paste0(Date)))  %>%
group_by(Date) %>%
summarize(nightlows = min(Temp_C)) %>%
ungroup() %>%
mutate(index = as.numeric(Date-min(Date)+1))
demo <- read.csv("RFID_Records_fixed.csv")
demo <- demo %>%
select(-Date) %>%
filter(Species != "SCJU")
## quick stats for results section
ndowo <- all_visits %>%
filter(Species == "DOWO")
nwbnu <- all_visits %>%
filter(Species == "WBNU")
### Species Models for DOWO and WBNU
morn_visits <- all_visits %>%
mutate(Hour = hour(Datetime)) %>%
mutate(Date = date(Datetime)) %>%
filter(Hour >= 6 | Hour <= 11) %>%
group_by(RFID, Date) %>%
summarise(sumvisits = n()) %>%
ungroup() %>%
left_join(weather, by = "Date") %>%
left_join(demo, by = "RFID") %>%
select(Date, RFID, Species, Weight, Tarsus, Wing, Sex, Age, Culmen, nightlows, sumvisits) %>%
filter(Date < "2019-03-11" & Date > "2019-01-25") %>%
filter(Species == "DOWO" | Species == "WBNU")
morn_visits$RFID <- as.factor(morn_visits$RFID)
newdata <- morn_visits[-9]
#write.csv(newdata, file = "C:/Users/Annie Madsen/Documents/Madsen/Coursework/R Class/feederdata.csv")
###
newdat2=newdata %>%  group_by(RFID) %>% mutate(lag1=dplyr::lag(nightlows)) %>% mutate(lead1=dplyr::lead(nightlows))
####
require(mgcv)
md <- gamm(sumvisits ~ s(nightlows, fx = FALSE, bs = "tp") + s(RFID, bs = "re"),
family = poisson,
data = morn_visits %>% filter(Species == "DOWO"))
summary(md$gam)
summary(md$lme)
plot(md$gam)
mw <- gamm(sumvisits ~ s(nightlows, fx = FALSE, bs = "tp") + s(RFID, bs = "re"),
family = poisson,
data = morn_visits %>% filter(Species == "WBNU"))
summary(mw$gam)
summary(mw$lme)
plot(mw$gam)
### species level LMMs
require(lme4)
test_dowo <- glmer(sumvisits ~ scale(nightlows) + (1|RFID), data = morn_visits %>% filter(Species == "DOWO"), family = "poisson")
summary(test_dowo)
test_wbnu <- glmer(sumvisits ~ scale(nightlows) + (1|RFID), data = morn_visits %>% filter(Species == "WBNU"), family = "poisson")
summary(test_wbnu)
anova(test_dowo)
anova(test_wbnu)
Anova(test_wbnu)
require(lmerTest)
summary(test_wbnu)
anova(test_wbnu)
lmerTest::lsmeansLT(test_wbnu)
r.squaredGLMM(test_dowo)
r.squaredGLMM(test_wbnu)
library(rsq)
r.squaredGLMM(test_dowo)
r.squaredGLMM(test_wbnu)
library(MuMIn)
r.squaredGLMM(test_dowo)
r.squaredGLMM(test_wbnu)
plot(resid(test_dowo))
plot(resid(test_wbnu))
plot(sumvisits ~ scale(nightlows), data=morn_visits %>% filter(Species == "DOWO"))
boxplot(sumvisits ~ scale(nightlows), data=morn_visits %>% filter(Species == "DOWO"))
boxplot(sumvisits ~ scale(nightlows), data=morn_visits %>% filter(Species == "WBNU"))
plot(sumvisits ~ scale(nightlows), data=morn_visits %>% filter(Species == "WBNU"))
morn_visits
###outlier?
test_wbnu <- glmer(sumvisits ~ scale(nightlows) + (1|RFID), data = morn_visits %>% filter(Species == "WBNU") %>% filter(RFID !="011016FE79"), family = "poisson")
summary(test_wbnu)
require(tidyverse)
require(lubridate)
##data
load("all_visits.dat")
View(all_visits)
head(all_visits)
wbnu=all_visits %>% filter(Species=="WBNU")
wbnu
wbnu=all_visits %>% filter(Species=="WBNU") %>% split(RFID)
wbnu=all_visits %>% filter(Species=="WBNU") %>% group_by(RFID)
wbnu
wbnu(logger)
wbnu$Logger
wbnu$RFID
wbnu=all_visits %>% filter(Species=="WBNU") %>% arrange(RFID, Logger) %>% group_by(RFID)
wbnu
wbnu$Logger
wbnu=all_visits %>% filter(Species=="WBNU") %>% arrange(RFID, Logger) %>% group_by(RFID)
date(wbnu$Datetime)
wbnu%>% group_by(RFID, date(Datetime)) %>% unique(Logger)
wbnu%>% group_by(RFID, date(Datetime)) %>% n(unique(Logger))
wbnu%>% group_by(RFID, date(Datetime)) %>% distinct(Logger)
wbnu%>% group_by(RFID, date(Datetime)) %>% distinct(Logger) %>% arrange(date(Datetime))
all_visits$Date
wbnu%>% group_by(RFID, Date) %>% distinct(Logger) %>% arrange(Date)
wbnu%>% group_by(RFID, Date) %>% distinct(Logger) %>% arrange(RFID, Date)
wbnu.visits.daily=wbnu%>% group_by(RFID, Date) %>% n()
wbnu.visits.daily=wbnu%>% group_by(RFID, Date) %>% n(RFID)
wbnu.visits.daily=wbnu%>% group_by(RFID, Date) %>% count()
wbnu.visits.daily
wbnu.visits.daily.feeders=wbnu%>% group_by(RFID, Date) %>% count(unique(Logger))
wbnu.visits.daily.feeders=wbnu%>% group_by(RFID, Date) %>% count(distinct(Logger))
wbnu.visits.daily.feeders=wbnu%>% group_by(RFID, Date) %>% n_distinct(Logger)
wbnu%>% group_by(RFID, Date)
## This time with single-species networks
library(asnipe)
library(igraph)
library(tidyverse)
library(lubridate)
#import files
gmmDOWO=readRDS("conspecificDOWOflocks.rds") #import gmm results file. Will need this for permuting group-by-individual matrices.
gmmWBNU=readRDS("conspecificWBNUflocks.rds") #import gmm results file. Will need this for permuting group-by-individual matrices.
gbi_dowo=gmmDOWO$gbi
gbi_wbnu=gmmWBNU$gbi
dowoadj=get_network(gbi_dowo)
wbnuadj=get_network(gbi_wbnu)
diag(dowoadj)=NA
diag(wbnuadj)=NA
###
load("all_visits.dat")
load("weather.dat")
demo=read.csv("RFID_Records_fixed.csv")
all_visits
weather$Date <- as.Date(weather$Date, format = "%m/%d/%Y")
weather.use <- weather %>%
mutate(Hour = hour(datetime)) %>%
filter(Hour >= 19 | Hour <= 4) %>%
mutate(Lagdate = ifelse(Hour <= 4, paste0(lag(Date)), paste0(Date))) %>%
group_by(Date) %>%
summarize(nightlows = min(Temp_C)) %>%
ungroup() %>%
filter(Date>"2019-01-26"&Date<"2019-03-10")
#weather
morn_visits <- all_visits %>%
mutate(Hour = hour(Datetime)) %>%
mutate(Date = date(Datetime)) %>%
filter(Hour >= 6 | Hour <= 11) %>%
group_by(RFID, Date) %>%
summarise(sumvisits = n()) %>%
ungroup() %>%
left_join(weather, by = "Date") %>%
filter(Date < "2019-03-11" & Date > "2019-01-25")
morn_visits$RFID <- as.factor(morn_visits$RFID)
#shortcut
morn_visits$dailyvisits=morn_visits$sumvisits
dv=morn_visits
## daily visits per individual
# dv <- all_visits %>%
#   filter(Date < "2019-03-11" & Date > "2019-01-25") %>%
#   group_by(RFID, Date) %>%
#   summarise(dailyvisits = n())
## mean daily visits per individual
ref <- dv %>%
group_by(RFID) %>%
summarise(mdv = mean(dailyvisits)) %>%
ungroup()
## sd of daily visits
dvsd <- sd(dv$dailyvisits)
## build the df
require(reshape)
mat_ddm <- cast(dv, Date ~ RFID, value = "dailyvisits")
mat_ddm[is.na(mat_ddm)] <- 0
mat <- mat_ddm[2:46]/dvsd
myvec <- (ref$mdv[match(names(mat_ddm[2:45]), ref$RFID)])/dvsd
mat_final <- mat[1] - myvec[1]
for(i in 2:44){
mat_temp <- mat[i] - myvec[i]
mat_final <- cbind(mat_final, mat_temp)
}
mat_final
##
##dowo
dowovisits=mat_final[,which(colnames(mat_final)%in%rownames(dowoadj))]
dowovisits.mat=as.matrix(dowovisits)
dowoadj.bin=dowoadj
dowoadj.bin[which(dowoadj.bin>0)]=1
colSums(dowoadj.bin[1,]*t(dowovisits.mat), na.rm=T)
dowoadj.norm.row=t(apply(dowoadj, 1, function(x) x/sum(x, na.rm=T)))
dowo.friend.activity=apply(dowoadj.norm.row, 1, function(x) colSums(x*t(dowovisits.mat), na.rm=T))
dowo.friend.activity=as.data.frame(dowo.friend.activity)
dowo.friend.activity
library(lme4)
library(lmerTest)
library(MuMIn)
dowovisits.dat=as.data.frame(dowovisits)
dowovisits.dat$Date=weather.use$Date
dowovisits.dat$nightlows=weather.use$nightlows
dowo.a= dowovisits.dat %>% gather("ID", "z_score", -Date, -nightlows)
dowo.friend.activity$Date=weather.use$Date
dowo.friend.activity$nightlows=weather.use$nightlows
dowo.b = dowo.friend.activity %>% gather("ID", "z_score_friends", -Date, -nightlows)
dowo.final.dat=merge(dowo.a,dowo.b)
dowomod=lmer(z_score~scale(nightlows)*scale(z_score_friends)+(1|ID), data=dowo.final.dat)
summary(dowomod)
r.squaredGLMM(dowomod)
#### PPNC Network and Temperature Paper
require(tidyverse)
require(lubridate)
##data
load("C:/Users/Annie Madsen/Documents/Madsen/R/all_visits.dat")
load("C:/Users/Annie Madsen/Documents/Madsen/R/weather.dat")
weather$Date <- as.Date(weather$Date, format = "%m/%d/%Y")
weather <- weather %>%
mutate(Hour = hour(datetime)) %>%
filter(Hour >= 19 | Hour <= 4) %>%
mutate(Lagdate = ifelse(Hour <= 4, paste0(lag(Date)), paste0(Date)))  %>%
group_by(Date) %>%
summarize(nightlows = min(Temp_C)) %>%
ungroup() %>%
mutate(index = as.numeric(Date-min(Date)+1))
demo <- read.csv("C:/Users/Annie Madsen/Documents/Madsen/Pioneers Park Project/Bird Banding Data/RFID_Records_03052019.csv")
demo <- demo %>%
select(-Date) %>%
filter(Species != "SCJU")
# ## quick stats for results section
# ndowo <- all_visits %>%
#   filter(Species == "DOWO")
# nwbnu <- all_visits %>%
#   filter(Species == "WBNU")
### Species Models for DOWO and WBNU
morn_visits <- all_visits %>%
mutate(Hour = hour(Datetime)) %>%
mutate(Date = date(Datetime)) %>%
filter(Hour >= 6 | Hour <= 11) %>%
group_by(RFID, Date) %>%
summarise(sumvisits = n()) %>%
ungroup() %>%
left_join(weather, by = "Date") %>%
left_join(demo, by = "RFID") %>%
select(Date, RFID, Species, Weight, Tarsus, Wing, Sex, Age, Culmen, nightlows, sumvisits) %>%
filter(Date < "2019-03-11" & Date > "2019-01-25") %>%
filter(Species == "DOWO" | Species == "WBNU")
morn_visits$RFID <- as.factor(morn_visits$RFID)
# newdata <- morn_visits[-9]
# write.csv(newdata, file = "C:/Users/Annie Madsen/Documents/Madsen/Coursework/R Class/feederdata.csv")
require(mgcv)
md <- gamm(sumvisits ~ s(nightlows, fx = FALSE, bs = "tp") + s(RFID, bs = "re"),
family = poisson,
data = morn_visits %>% filter(Species == "DOWO"))
summary(md$gam)
summary(md$lme)
plot(md$gam)
family = poisson,
data = morn_visits %>% filter(Species == "WBNU"))
summary(mw$gam)
summary(mw$lme)
plot(mw$gam)
### species level LMMs
require(lme4)
test_dowo <- glmer(sumvisits ~ scale(nightlows) + (1|RFID), data = morn_visits %>% filter(Species == "DOWO"), family = "poisson")
plot(resid(test))
test_wbnu <- glmer(sumvisits ~ scale(nightlows) + (1|RFID), data = morn_visits %>% filter(Species == "WBNU"), family = "poisson")
plot(resid(test))
library(rsq)
library(MuMIn)
library(arm)
r.squaredGLMM(test_dowo)
r.squaredGLMM(test_wbnu)
### generating exploratory tendency metrics for Kris Hans UCARE project
require(tidyverse)
require(lubridate)
##data
load("all_visits.dat")
head(all_visits)
all_visits$Date
wbnu=all_visits %>% filter(Species=="WBNU") %>% arrange(RFID, Logger)
wbnu.visits.daily=wbnu%>% group_by(RFID, Date) %>% count()
wbnu.visits.daily.feeders=wbnu%>% group_by(RFID, Date) %>% n_distinct(Logger)
wbnu.visits.daily
wbnu%>% group_by(RFID, Date)
n_distinct(Logger)
n_distinct(wbnu$Logger)
wbnu.visits.daily.feeders=wbnu%>% group_by(RFID, Date) %>% summarise(n_distinct(Logger))
wbnu.visits.daily.feeders
wbnu%>% group_by(RFID, Date) %>% count()
wbnu%>% group_by(RFID, Date)
wbnu%>% group_by(RFID, Date) %>% select(RFID, Date, Logger)
wbnu%>% group_by(RFID, Date)
wbnu.visits.daily.feeders=wbnu%>% group_by(RFID, Date) %>% select(RFID, Date, Logger) %>% summarise(n_distinct(Logger))
wbnu.visits.daily.feeders
wbnu%>% group_by(RFID, Date) %>% select(RFID, Date, Logger)
wbnu%>% group_by(RFID, Date) %>% select(RFID, Date, Logger) %>% table()
wbnu%>% group_by(RFID, Date) %>% select(RFID, Logger, Date) %>% table()
logger_array=wbnu%>% group_by(RFID, Date) %>% select(RFID, Logger, Date) %>% table()
class(logger_array)
logger_array=wbnu%>% group_by(RFID, Date) %>% select(Logger, RFID,  Date) %>% table()
logger_array
logger_array=wbnu%>% group_by(RFID, Date) %>% select(Logger,  Date,RFID) %>% table()
logger_array
apply(logger_array, c(2,3), sum)
wbnu.visits.daily
apply(logger_array, c(2,3), sum)
indiv_date_sum=apply(logger_array, c(2,3), sum)
indiv_avg_visit=colMeans(indiv_date_sum)
indiv_avg_visit
indiv_date_sum
write.csv(indiv_date_sum, "visits_indiv_x_date.csv")
logger_array
apply(logger_array, 3, colSums)
apply(logger_array, 3, function(x) x/colSums(x))
apply(logger_array, 3, function(x) x/rowSums(x))
apply(logger_array, 3, function(x) x/colSums(x))
logger_array
apply(logger_array, 3, function(x) x/colSums(x))
apply(logger_array, 3, function(x) {
p=x/colSums(x)
ln_p=log(p)
sum(p*ln_p)}
)
apply(logger_array, 3, function(x) {
if(colSums(x)>0){
p=x/colSums(x)
ln_p=log(p)
sum(p*ln_p)
}}
)
warnings()
apply(logger_array, 3, function(x) colSums(x) >0)
apply(logger_array, 3, function(x) {
if(colSums(x)>0){
p=x/colSums(x)
}
ln_p=log(p)
sum(p*ln_p)}
)
apply(logger_array, 3, function(x) {
if(colSums(x)>0) p=x/colSums(x) else next
ln_p=log(p)
sum(p*ln_p)}
)
apply(logger_array, 3, function(x) {
if(colSums(x)>0) {p=x/colSums(x)}
ln_p=log(p)
sum(p*ln_p)}
)
apply(logger_array, 3, function(x) {
if(colSums(x)>0) {p=x/colSums(x)}
#ln_p=log(p)
#sum(p*ln_p)}
)
apply(logger_array, 3, function(x) {
if(colSums(x)>0) {p=x/colSums(x)}
#ln_p=log(p)
#sum(p*ln_p)
}
)
apply(logger_array, 3, function(x) {
if(colSums(x)>0) {p=x/colSums(x)}
ln_p=log(p)
sum(p*ln_p, na.rm=T)
}
)
apply(logger_array, 3, function(x) {
if(colSums(x)>0) p=x/colSums(x)
ln_p=log(p)
sum(p*ln_p, na.rm=T)
}
)
apply(logger_array, 3, function(x) {
p=x/colSums(x)
ln_p=log(p)
sum(p*ln_p, na.rm=T)
}
)
p
apply(logger_array, 3, function(x) {
p=x/colSums(x)
#ln_p=log(p)
#sum(p*ln_p, na.rm=T)
}
p
)
apply(logger_array, 3, function(x) {
p=x/colSums(x)
#ln_p=log(p)
#sum(p*ln_p, na.rm=T)
}
p
)
apply(logger_array, 3, function(x) {
p=x/colSums(x)}
#ln_p=log(p)
#sum(p*ln_p, na.rm=T)}
p
)
apply(logger_array, 3, function(x) {
p=x/colSums(x)}
p
#ln_p=log(p)
#sum(p*ln_p, na.rm=T)}
)
apply(logger_array, 3, function(x) {
p=x/colSums(x)
p})
apply(logger_array, 3, function(x) {
if (colSums(x)==0) p=NA else {
p=x/colSums(x)
p}})
apply(logger_array, 3, function(x) {
if (colSums(x)==0) p=NA else p=x/colSums(x)
})
p
apply(logger_array, 3, function(x) {
if (colSums(x)==0) p=NA else p=x/colSums(x)
p
})
logger_array
head(all_visits)
unique(all_visits$RFID)
write.csv(unique(all_visits$RFID), "RFID_indivs.csv")
### generating exploratory tendency metrics for Kris Hans UCARE project
require(tidyverse)
require(lubridate)
##data
load("all_visits.dat")
head(all_visits)
all_visits$Date
usedat=all_visits %>% filter(Species=="WBNU"|Species=="DOWO") %>% arrange(RFID, Logger)
visits.daily=usedat%>% group_by(RFID, Date) %>% count()
##visits.daily is the total number of visits to any feeder for a given bird on a given day
visits.daily.feeders=usedat%>% group_by(RFID, Date) %>% select(RFID, Date, Logger) %>% summarise(n_distinct(Logger))
##wbnu.visits.daily.feeders is the number of distinct feeders used by each bird on a given day
logger_array=usedat%>% group_by(RFID, Date) %>% select(Logger,  Date,RFID) %>% table()
apply(logger_array, 3, function(x) {
if (colSums(x)==0) p=NA else p=x/colSums(x)
p
})
#ln_p=log(p)
#sum(p*ln_p, na.rm=T)}
indiv_date_sum=apply(logger_array, c(2,3), sum)
indiv_avg_visit=colMeans(indiv_date_sum)
#write.csv(indiv_date_sum, "visits_indiv_x_date.csv")
indiv_date_feeders=pivot_wider(visits.daily.feeders, id_cols=Date, names_from = RFID, values_from = `n_distinct(Logger)`)
#write.csv(indiv_date_feeders, "feeders_indivxdate.csv")
#######
head(usedat)
usedat%>% select(Date, Datetime, RFID, Logger) %>% group_by(RFID, Date) %>% table(Logger)
usedat%>% select(Date, Datetime, RFID, Logger) %>% group_by(RFID, Date) %>% summarise(table(Logger))
usedat%>% select(Date, Datetime, RFID, Logger) %>% group_by(RFID, Date, Logger) %>% summarise(count())
usedat%>% select(Date, Datetime, RFID, Logger) %>% group_by(RFID, Date, Logger) %>% summarise(count
)
usedat%>% select(Date, Datetime, RFID, Logger) %>% group_by(RFID, Date, Logger) %>% count()
usedat%>% select(Date, Datetime, RFID, Logger) %>% group_by(RFID, Date, Logger) %>% count() %>% pivot_wider(values_from = n, names_from = Logger)
wide.dat=usedat%>% select(Date, Datetime, RFID, Logger) %>% group_by(RFID, Date, Logger) %>% count() %>% pivot_wider(values_from = n, names_from = Logger)
wide.dat %>% mutate(sum=LOGGER04+LOGGER08)
wide.dat %>% mutate(sum=LOGGER04+LOGGER08+LOGGER07+LOGGER05+LOGGER02+LOGGER06+LOGGER01)
wide.dat %>% mutate(sum=LOGGER04+LOGGER08+LOGGER07+LOGGER05+LOGGER02+LOGGER06+LOGGER01+LOGGER03)
wide.dat %>% mutate(sum=LOGGER04+LOGGER08+LOGGER07+LOGGER05+LOGGER02+LOGGER06+LOGGER01+LOGGER03)
?sum
wide.dat %>% mutate(sum=sum(LOGGER04,LOGGER08,LOGGER07,LOGGER05,LOGGER02,LOGGER06,LOGGER01,LOGGER03, na.rm=T))
%>% mutate(H=sum(LOGGER01/sum, LOGGER02/sum, na.rm=T))
wide.dat %>% mutate(sum=sum(LOGGER04,LOGGER08,LOGGER07,LOGGER05,LOGGER02,LOGGER06,LOGGER01,LOGGER03, na.rm=T)) %>% mutate(H=sum(LOGGER01/sum, LOGGER02/sum, na.rm=T))
wide.dat %>% mutate(sum=sum(LOGGER04,LOGGER08,LOGGER07,LOGGER05,LOGGER02,LOGGER06,LOGGER01,LOGGER03, na.rm=T)) %>% mutate(H=sum(LOGGER01/sum*log(LOGGER01/sum), LOGGER02/sum*log(LOGGER02/sum), LOGGER03/sum*log(LOGGER03/sum),na.rm=T))
wide.dat %>% mutate(sum=sum(LOGGER04,LOGGER08,LOGGER07,LOGGER05,LOGGER02,LOGGER06,LOGGER01,LOGGER03, na.rm=T)) %>% mutate(H=sum(LOGGER01/sum*log(LOGGER01/sum), LOGGER02/sum*log(LOGGER02/sum), LOGGER03/sum*log(LOGGER03/sum), LOGGER04/sum*log(LOGGER04/sum), LOGGER05/sum*log(LOGGER05/sum), LOGGER06/sum*log(LOGGER06/sum), LOGGER07/sum*log(LOGGER07/sum), LOGGER08/sum*log(LOGGER08/sum), na.rm=T))
wide.dat %>% mutate(sum=sum(LOGGER04,LOGGER08,LOGGER07,LOGGER05,LOGGER02,LOGGER06,LOGGER01,LOGGER03, na.rm=T)) %>% mutate(H=sum(-LOGGER01/sum*log(LOGGER01/sum), -LOGGER02/sum*log(LOGGER02/sum), -LOGGER03/sum*log(LOGGER03/sum), -LOGGER04/sum*log(LOGGER04/sum), -LOGGER05/sum*log(LOGGER05/sum), -LOGGER06/sum*log(LOGGER06/sum), -LOGGER07/sum*log(LOGGER07/sum), -LOGGER08/sum*log(LOGGER08/sum), na.rm=T))
shannon.wide.dat= wide.dat %>% mutate(sum=sum(LOGGER04,LOGGER08,LOGGER07,LOGGER05,LOGGER02,LOGGER06,LOGGER01,LOGGER03, na.rm=T)) %>% mutate(H=sum(-LOGGER01/sum*log(LOGGER01/sum), -LOGGER02/sum*log(LOGGER02/sum), -LOGGER03/sum*log(LOGGER03/sum), -LOGGER04/sum*log(LOGGER04/sum), -LOGGER05/sum*log(LOGGER05/sum), -LOGGER06/sum*log(LOGGER06/sum), -LOGGER07/sum*log(LOGGER07/sum), -LOGGER08/sum*log(LOGGER08/sum), na.rm=T))
shannon=wide.dat %>% select(Date, RFID, H)
shannon=shannon.wide.dat %>% select(Date, RFID, H)
shannon
shannon.wide.dat
plot(H~RFID, data=shannon)
boxplot(H~RFID, data=shannon)
shannon.wide.dat= wide.dat %>% filter(sum>5) %>% mutate(sum=sum(LOGGER04,LOGGER08,LOGGER07,LOGGER05,LOGGER02,LOGGER06,LOGGER01,LOGGER03, na.rm=T)) %>% mutate(H=sum(-LOGGER01/sum*log(LOGGER01/sum), -LOGGER02/sum*log(LOGGER02/sum), -LOGGER03/sum*log(LOGGER03/sum), -LOGGER04/sum*log(LOGGER04/sum), -LOGGER05/sum*log(LOGGER05/sum), -LOGGER06/sum*log(LOGGER06/sum), -LOGGER07/sum*log(LOGGER07/sum), -LOGGER08/sum*log(LOGGER08/sum), na.rm=T))
shannon.wide.dat= wide.dat  %>% mutate(sum=sum(LOGGER04,LOGGER08,LOGGER07,LOGGER05,LOGGER02,LOGGER06,LOGGER01,LOGGER03, na.rm=T)) %>% filter(sum>5) %>% mutate(H=sum(-LOGGER01/sum*log(LOGGER01/sum), -LOGGER02/sum*log(LOGGER02/sum), -LOGGER03/sum*log(LOGGER03/sum), -LOGGER04/sum*log(LOGGER04/sum), -LOGGER05/sum*log(LOGGER05/sum), -LOGGER06/sum*log(LOGGER06/sum), -LOGGER07/sum*log(LOGGER07/sum), -LOGGER08/sum*log(LOGGER08/sum), na.rm=T))
shannon=shannon.wide.dat %>% select(Date, RFID, H)
boxplot(H~RFID, data=shannon)
shannon.wide.dat= wide.dat  %>% mutate(sum=sum(LOGGER04,LOGGER08,LOGGER07,LOGGER05,LOGGER02,LOGGER06,LOGGER01,LOGGER03, na.rm=T)) %>% filter(sum>10) %>% mutate(H=sum(-LOGGER01/sum*log(LOGGER01/sum), -LOGGER02/sum*log(LOGGER02/sum), -LOGGER03/sum*log(LOGGER03/sum), -LOGGER04/sum*log(LOGGER04/sum), -LOGGER05/sum*log(LOGGER05/sum), -LOGGER06/sum*log(LOGGER06/sum), -LOGGER07/sum*log(LOGGER07/sum), -LOGGER08/sum*log(LOGGER08/sum), na.rm=T))
shannon=shannon.wide.dat %>% select(Date, RFID, H)
boxplot(H~RFID, data=shannon)
logger_array
visits.daily
##visits.daily is the total number of visits to any feeder for a given bird on a given day
write.csv(visits.daily, "dailyvisits.csv")
write.csv(visits.daily.feeders, "dailyfeeders.csv")
shannon
write.csv(shannon, "dailyshannon.csv")
inner_join(visits.daily, visits.daily.feeders)
inner_join(visits.daily, visits.daily.feeders, shannon)
inner_join(visits.daily, visits.daily.feeders) %>% inner_join(shannon)
daily_dat=inner_join(visits.daily, visits.daily.feeders) %>% inner_join(shannon)
write.csv(daily_dat, "daily_data.csv")
